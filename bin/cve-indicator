#!/usr/bin/env python3
#
# Copyright (C) 2018-2019 Kreitmair Konrad <kreitmair.konrad@web.de>
#
# This is free software, licensed under the GNU General Public License v2.
# See https://www.gnu.org/licenses/gpl-2.0.txt for more information.

import argparse
import os
import requests
import pkg_resources
import shutil

from datetime import datetime
from mako.template import Template
from cve_indicator.__init__ import __title__, __version__, __module__
from cve_indicator.Openwrt import Openwrt
from cve_indicator.FileHandler import FileHandler

file_handler = FileHandler()


def _genList(args):
    if args.project == 'openwrt':
        project = Openwrt(args.path)
        project.gen_list()


def _getCves(args):
    # TODO fetch exceptions of requests
    packages = {}
    findings = {}
    meta_data = {}
    findings['meta_data'] = {}
    findings['packages'] = {}

    packages = file_handler.load_json_data(args.path)
    meta_data = packages.get('meta_data')
    time_begin = datetime.now().replace(microsecond=0)
    timestamp = time_begin.isoformat()
    if args.api_url is None:
        config = file_handler.loadConfig()
        section = config.get('get-cves')

        if section is None:
            exit('Section get-cves not found in config file.')

        api_url_var = section.get('api_url')

        if api_url_var is None:
            exit('Variable api_url not found in section get-cves of '
                 'config file.')

        api_url = api_url_var
    else:
        api_url = args.api_url

    count_cves = 0

    for package in packages.get('packages').keys():
        cpe_str = packages.get('packages').get(package).get('cpe')

        pkg_data = packages.get('packages').get(package)
        print(cpe_str)
        cpe_response = requests.get(api_url + cpe_str).json()
        if cpe_response:
            cve_list = {}
            for cve in cpe_response:
                count_cves += 1
                cve_list[cve.get('id')] = {}
                cve_list[cve.get('id')]['cvss'] = cve.get('cvss')
                cve_list[cve.get('id')]['cvss-time'] = cve.get('cvss-time')
            pkg_data['cves'] = cve_list
            findings['packages'][package] = pkg_data

    time_end = datetime.now().replace(microsecond=0)

    meta_data_new = {}
    meta_data_new['timestamp'] = timestamp
    meta_data_new['time_needed'] = "{:0>8}".format(str(time_end - time_begin))
    meta_data_new['pkgs_with_cves'] = len(findings['packages'])
    meta_data_new['cves_total'] = count_cves
    meta_data_new['api_url'] = api_url
    meta_data_new['application'] = '{} {}'.format(__title__, __version__)

    meta_data['cve-indicator_get-cves'] = meta_data_new
    findings['meta_data'] = meta_data

    file_handler.finish_json(findings, 'get_cves')


def _genRprt(args):
    json_data = file_handler.load_json_data(args.path)
    report_name = 'indicator-report-{}-{}.html'
    report_dir = 'cve-indicator-report'
    template_dir = 'templates/'
    filename_html = 'report.html'
    filename_css = 'report.css'
    filename_js = 'report.js'

    template_path_html = pkg_resources.resource_filename(
                                                __module__,
                                                template_dir + filename_html)
    template_path_css = pkg_resources.resource_filename(
                                                __module__,
                                                template_dir + filename_css)
    template_path_js = pkg_resources.resource_filename(
                                                __module__,
                                                template_dir + filename_js)
    mytemplate = Template(filename=template_path_html)

    meta_data = json_data.get('meta_data')
    indicator_data = meta_data.get('cve-indicator_get-cves')

    api_url = '/'.join(indicator_data.get('api_url').split('/')[:3])
    api_url = api_url + "/cve/"

    timestamp = str(datetime.now().replace(microsecond=0).date())
    counter = 0
    filename_report = report_name.format(timestamp, counter)
    while os.path.isfile(filename_report):
        counter += 1
        filename_report = report_name.format(timestamp, counter)

    if not os.path.isdir(report_dir):
        os.makedirs(report_dir)

    with open(filename_report, 'w', encoding='UTF-8') as f:
        f.write(mytemplate.render(packages_list=json_data.get('packages'),
                                  url=api_url,
                                  meta_data=meta_data,
                                  report_dir=report_dir,
                                  css_file=filename_css,
                                  js_file=filename_js))

    shutil.copyfile(template_path_css, report_dir + '/' + filename_css)
    shutil.copyfile(template_path_js, report_dir + '/' + filename_js)

    print(os.path.abspath(filename_report))


def _get_parser():
    help_genList = 'generate a list of packages'
    help_getCves = 'find all CVEs for packages in list'
    help_genRprt = 'generate a report for found CVEs for packages'

    parser = argparse.ArgumentParser(prog=__title__)

    parser.add_argument('-v',
                        '--version',
                        help='prints the version of cve-indicator',
                        action='version',
                        version="{} {}".format(__title__, __version__))

    subparsers = parser.add_subparsers(help='sub-command help')

    genList_parser = subparsers.add_parser('gen-list', help=help_genList)
    genList_parser.set_defaults(func=_genList)
    genList_parser.add_argument('project',
                                type=str,
                                help='name of project like "openwrt"')
    genList_parser.add_argument('path',
                                type=str,
                                help='path to dir with Makefiles')

    getCves_parser = subparsers.add_parser('get-cves', help=help_getCves)
    getCves_parser.set_defaults(func=_getCves)
    getCves_parser.add_argument('path',
                                type=str,
                                help='path to json file with cpes for '
                                'packages')
    getCves_parser.add_argument('-i', '--api_url',
                                type=str, help='URL to cve-search')

    genRprt_parser = subparsers.add_parser('gen-rprt', help=help_genRprt)
    genRprt_parser.set_defaults(func=_genRprt)
    genRprt_parser.add_argument('path',
                                type=str,
                                help='path to json file with cves for '
                                'packages')

    return parser


parser = _get_parser()
cmdl_args = parser.parse_args()
cmdl_args.func(cmdl_args)
