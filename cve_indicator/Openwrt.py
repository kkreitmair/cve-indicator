import os

from datetime import datetime
from cve_indicator.__init__ import __title__, __version__
from .ListGenerator import ListGenerator
from .FileHandler import FileHandler


class Openwrt(ListGenerator):
    def _get_files(self):
        manifestfiles = []

        if not os.path.isdir(self.path):
            exit("The given directory path doesn't exist or is not a "
                 "directory.")

        directory = os.path.abspath(self.path)

        for (dirpath, dirnames, filename) in os.walk(directory):
            for file in filename:
                if '.manifest' in file:
                    manifestfiles.append(dirpath + '/' + file)
        if len(manifestfiles) == 0:
            exit("No Manifest files where found!")

        return manifestfiles

    def _search_cpes(self, files):
        count_pkgs = 0
        count_cpes = 0
        packages = {}
        for manifestfile in files:
            with open(manifestfile, 'r') as manifestfile_buffer:
                line = manifestfile_buffer.readline()
                while line != '':
                    if line.startswith('Package: '):
                        count_pkgs += 1
                    if line.startswith('Version: '):
                        raw_version = line.split(':')[-1].strip('\n ')
                        pkg_version = '-'.join(raw_version.split('-')[:-1])
                    if line.startswith('CPE-ID: '):
                        count_cpes += 1
                        raw_cpe = ':'.join(line.split(':')[1:])
                        pkg_cpe = raw_cpe.strip('\n ')
                        if pkg_cpe and pkg_version:
                            pkg_name = pkg_cpe.split(':')[-1]
                            cpe_string = pkg_cpe + ':' + pkg_version
                            packages[pkg_name] = {}
                            packages[pkg_name]['version'] = pkg_version
                            packages[pkg_name]['cpe'] = cpe_string
                    line = manifestfile_buffer.readline()
        return packages, count_pkgs, count_cpes

    def _gen_json(self, packages, count_pkgs, count_cpes):
        handler = FileHandler()
        result_data = {}
        timestamp = datetime.now().replace(microsecond=0)

        meta_data = {}
        meta_data['timestamp'] = timestamp.isoformat()
        meta_data['project'] = 'openwrt'
        meta_data['application'] = '{} {}'.format(__title__, __version__)
        meta_data['packages_total'] = count_pkgs
        meta_data['packages_with_cpe_id'] = len(packages)

        result_data['packages'] = packages
        result_data['meta_data'] = {}
        result_data['meta_data']['cpe_list_generator_data'] = meta_data

        handler.finish_json(result_data, 'gen_list')

    def gen_list(self):
        files = self._get_files()
        pks, c_pkgs, c_cpes = self._search_cpes(files)
        self._gen_json(pks, c_pkgs, c_cpes)
